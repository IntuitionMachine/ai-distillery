#!/usr/bin/env python3
# -*- coding: utf-8 -*-

""" Baselines for paper embeddings """
import argparse
import glob
import os
import sys
import pickle

from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.pipeline import Pipeline
from sklearn.decomposition import TruncatedSVD

from aidistillery.file_handling import identifier_from_path

def main(args):
    """Runs lsa on a data directory

    :args: command line argument namespace
    """
    lsa = Pipeline(
        [
            ("tfidf", TfidfVectorizer(input='filename', stop_words='english', max_features=50000)),
            ("svd", TruncatedSVD(n_components=args.n_components))
        ]
    )
    all_papers = glob.glob(os.path.join(args.data, "*"))
    print("Run {}-dim LSA on {} papers.".format(args.n_components, len(all_papers)))
    lsa_embedding = lsa.fit_transform(all_papers)
    print("Explained variance ratio sum:", lsa.named_steps.svd.explained_variance_ratio_.sum())
    # save_word2vec_format(OUTFILE, [identifier_from_path(p) for p in all_papers], LSA_EMBEDDING)
    labels = [identifier_from_path(p) for p in all_papers]

    if args.annotate is not None:
        with open(args.annotate, 'rb') as fhandle:
            id2title = pickle.load(fhandle)
        # Replace identifier labels with title labels (if possible)
        labels = [id2title.get(x, x) for x in labels]

    embedding_bf = {
        'labels': labels,
        'embeddings': lsa_embedding
    }

    with open(args.outfile, 'wb') as outfile:
        pickle.dump(embedding_bf, outfile)


def _add_args(parser):
    parser.add_argument('data',
                        help="Path to dir containing full-texts")
    parser.add_argument('--annotate',
                        help="Path to pickled dict containing id to title mapping",
                        default=None)
    parser.add_argument('-n', '--n-components',
                        help="Number of dimensions", type=int,
                        default=300)
    parser.add_argument('-o', '--outfile', default=None,
                        help=("Destination to store lsa embeddings in ben format. "
                              "Default is 'data/embeddings/lsa-{n_components}.pkl'"))


if __name__ == '__main__':
    PARSER = argparse.ArgumentParser()
    PARSER = _add_args(PARSER)
    ARGS = PARSER.parse_args()

    if ARGS.outfile is None:
        ARGS.outfile = os.path.join("data", "embeddings", f"lsa-{ARGS.n_components}.pkl")
    print("LSA Embedding will be stored at:", ARGS.outfile)

    main(ARGS)

