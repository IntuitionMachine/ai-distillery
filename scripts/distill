#!/usr/bin/env python3

import argparse

# TODO FIXME Import does *FAIL*, migrate other scripts into package, such that
# this script is stand-alone wrt aidistillery package.

from aidistillery.document_embeddings import lsa_main, lsa_add_args
from aidistillery.document_embeddings import doc2vec_main, doc2vec_add_args

# A mapping from subcommand to main executable of subcommand
class DistillSubcommand(object):

      """Docstring for DistillSubcommand. """

      def __init__(self, command, add_args_fn, main_fn, help=None):
            """Common data structure for subcommands

            :command: The subcommand string
            :add_args_fn: A function that takes a parser and adds arguments
            :main_fn: The main function to run with arguments namespace
            :help: (optional) help string for the subcommand

            """
            self.command = command
            self.add_args_fn = add_args_fn
            self.main_fn = main_fn
            self.help = help


SUBCOMMANDS = [
      DistillSubcommand('lsa', lsa_add_args, lsa_main, "Run latent semantic analysis"),
      DistillSubcommand('doc2vec', doc2vec_add_args, doc2vec_main, "Run doc2vec")
      # TODO add more
]


            

def main():
      """Main entry point for ai distillery's cli 
      """
      parser = argparse.ArgumentParser()
      parser.add_argument(choices)
      subparsers = parser.add_subparsers(help="Sub-command help")

      # Register all subcommands
      for subcommand in SUBCOMMANDS:
            subcommand_parser = subparser.add_parser(subcommand.command, help=subcommand.help)
            subcommand.add_args_fn(subcommand_parser)

      # Parse everything
      args = parser.parse_args()

      # Args only holds namespace for selected subcommand
      subcommand.main(args)



if __name__ == "__main__":
      main()

